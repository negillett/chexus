#!/usr/bin/env python

import argparse
import json
import logging

from chexus import Client, BucketItem, TableItem

LOG = logging.getLogger("push-file")


def main():
    LOG.setLevel(logging.INFO)
    logging.basicConfig(format="%(message)s", level=logging.INFO)

    parser = argparse.ArgumentParser(
        description="Upload a file to an Amazon S3 bucket and put data"
                    " about it in a DynamoDB table.",
    )
    parser.add_argument(
        "--file-path",
        required=True,
        help="Local filesystem path to the file."
    )
    parser.add_argument(
        "--file-metadata",
        default={},
        type=json.loads,
        help="Additional data sent with the file in JSON string format,"
             " e.g., '{\"key\": \"value\"}'"
    )
    parser.add_argument(
        "--release-date",
        help="Date on which the content will be made available."
    )
    parser.add_argument(
        "--dest-uri",
        required=True,
        help="URI from which the file can be accessed."
    )
    parser.add_argument(
        "--bucket",
        required=True,
        help="S3 bucket in which to upload file."
    )
    parser.add_argument(
        "--table",
        required=True,
        help="DynamoDB table in which to put file data."
    )
    parser.add_argument(
        "--aws-access-id",
        default=None,
        help="Access ID for Amazon services. If no ID is provided, attempts to"
             " find it among environment variables and ~/.aws/config file will"
             " be made"
    )
    parser.add_argument(
        "--aws-access-key",
        default=None,
        help="Access key for Amazon services. If no key is provided, attempts"
             " to find it among environment variables and ~/.aws/config file"
             " will be made"
    )
    parser.add_argument(
        "--aws-session-token",
        default=None,
        help="Session token for Amazon services. If no token is provided,"
             " attempts to find it among environment variables and"
             " ~/.aws/config file will be made"
    )
    parser.add_argument(
        "--default-region",
        default=None,
        help="Default region for Amamzon services. If no region is provided,"
             " attempts to find it among environment variables and"
             " ~/.aws/config file will be made"
    )
    parser.add_argument(
        "--dryrun",
        action="store_true",
        help="Don't execute the action, only log what would otherwise be done."
    )
    parser.add_argument(
        "--debug",
        action="store_true",
        help="Include debug logging."
    )

    p = parser.parse_args()

    if p.debug:
        logging.getLogger("chexus").setLevel(logging.DEBUG)
        LOG.setLevel(logging.DEBUG)

    client = Client(
        access_id=p.aws_access_id,
        access_key=p.aws_access_key,
        session_token=p.aws_session_token,
        default_region=p.default_region,
    )

    bucket_item = BucketItem(file_path=p.file_path)

    table_item = TableItem(
        web_uri=p.dest_uri,
        from_date=p.release_date,
        object_key=bucket_item.checksum,
        metadata=p.file_metadata,
    )

    client.upload_files(items=bucket_item, bucket_name=p.bucket)
    client.put_items(items=table_item, table_name=p.table)


if __name__ == "__main__":
    main()
